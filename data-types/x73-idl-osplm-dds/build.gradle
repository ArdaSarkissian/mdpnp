apply plugin: 'java'

// By default we build (no task specified)
defaultTasks 'build'

sourceCompatibility = JAVA_VERSION_SOURCE
targetCompatibility = JAVA_VERSION_CLASSES

// configuration for code generation
configurations { osplddsgen }

def GENERATED_JAVA_SOURCES = new File(project.projectDir, 'build/generated/src/main/java').getAbsolutePath()

// add generated source code to the main java sourceset
sourceSets {
  main {
    java {
      srcDirs += GENERATED_JAVA_SOURCES
    }
  }
}

// include java source code in the assembled jar
jar.doFirst {
  sourceSets.main.java.srcDirs.each {
    from it
  }
}

dependencies {
  compile group: 'org.opensplice.mobile', name: 'ospl-mobile', version: '1.1.0'

  compile project(':data-types:x73-idl')
  compile group: 'org.opensplice.mobile', name: 'mobile-monitor', version: '1.1.0'
  compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.2'
  compile group: 'log4j', name: 'log4j', version: '1.2.17'
  testCompile group: 'junit', name: 'junit', version: '4.11'

  // all these dependencies are for the code generator
  osplddsgen group: 'org.opensplice.mobile', name: 'idl2j', version: '1.1.0'

}

// makes output directories for the code generator
task mkdirs << {
  file(GENERATED_JAVA_SOURCES).mkdirs()
}

// Runs the RTI DDS Generate code generator for all idl files under src/main/idl
task osplddsgenJava(dependsOn: [mkdirs]) << {
    FileTree idlFiles = project(':data-types:x73-idl').build.source
    String myMain = 'org.opensplice.mobile.idl2j.Compiler'
    List<String> myArgs = ['-td', GENERATED_JAVA_SOURCES]

    for(File f : idlFiles) {
        println 'Generating from ' + f.name
        myArgs.add(f.getAbsolutePath())
        javaexec {
            classpath = configurations.osplddsgen
            jvmArgs = []
            main = myMain
            args = myArgs
        }
        myArgs.remove(myArgs.size()-1)
    }
}

// Deletes the java code generated by the OSPL-M DDS code generator
task cleanOsplmddsgenJava(type: Delete) {
  delete GENERATED_JAVA_SOURCES
}

// IDL files are the inputs to the code generator
//rtiddsgenJava.inputs.source(project(':data-types:x73-idl').build.source)

// java files under generated/src/main/java are the outputs of the code generator
//rtiddsgenJava.outputs.files(fileTree(dir: GENERATED_JAVA_SOURCES).include('**/*.java'))

// before compiling java code generation must complete
//compileJava.dependsOn 'rtiddsgenJava'

// before cleaning generated sources should be cleaned
//clean.dependsOn 'cleanRtiddsgenJava'
