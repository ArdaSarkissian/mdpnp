apply plugin: 'java'

// jplourde hacked this together March 13 with

// By default we build (no task specified)
defaultTasks 'build'

sourceCompatibility = JAVA_VERSION_SOURCE
targetCompatibility = JAVA_VERSION_CLASSES

// configuration for code generation
configurations { rtiddsgen }

def GENERATED_JAVA_SOURCES = new File(project.projectDir, 'build/generated/src/main/java').getAbsolutePath()
def GENERATED_CPP_SOURCES  = new File(project.projectDir, 'build/generated/src/main/cpp').getAbsolutePath()

// add generated source code to the main java sourceset
sourceSets {
  main {
    java {
      srcDirs += GENERATED_JAVA_SOURCES
    }
  }
}

// include java source code in the assembled jar
jar.doFirst {
  sourceSets.main.java.srcDirs.each {
    from it
  }
}

dependencies {
  // nddsjava.jar is the java binding library for RTI DDS

  compile group: 'org.mdpnp.rti.dds', name: 'nddsjava-rt', version: '5.0'

  switch(localOsName) {
      case MAC:
          testRuntime group: 'org.mdpnp.rti.dds', name: 'nddsjava-bin', version: '5.0', classifier: 'darwin'
          break
      case WINDOWS:
          switch(localOsArch) {
              case X64:
                  testRuntime group: 'org.mdpnp.rti.dds', name: 'nddsjava-bin', version: '5.0', classifier: 'win32amd64'
                  break
              case X86:
                  testRuntime group: 'org.mdpnp.rti.dds', name: 'nddsjava-bin', version: '5.0', classifier: 'win32x86'
                  break
          }
      case LINUX:
          switch(localOsArch) {
              case X64:
                  testRuntime group: 'org.mdpnp.rti.dds', name: 'nddsjava-bin', version: '5.0', classifier: 'linuxamd64'
                  break
              case X86:
                  testRuntime group: 'org.mdpnp.rti.dds', name: 'nddsjava-bin', version: '5.0', classifier: 'linuxi386'
                  break
              case ARM:
              case ARMHF:
                  testRuntime group: 'org.mdpnp.rti.dds', name: 'nddsjava-bin', version: '5.0', classifier: 'linuxarm'
                  break
          }
  }




  compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.2'
  runtime group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.2'
  runtime group: 'log4j', name: 'log4j', version: '1.2.17'


  compile project(':data-types:x73-idl')
  compile group: 'org.omg.dds', name: 'omgdds', version: '1.0-Beta3'
  testCompile group: 'junit', name: 'junit', version: '4.11'

  // all these dependencies are for the code generator
  rtiddsgen group: 'com.rti.dds', name: 'rtiddsgen-resource', version: '5.0'
  rtiddsgen group: 'com.rti.dds', name: 'rtiddsgen', version: '5.0'
  rtiddsgen group: 'org.anarres', name: 'cpp-bin', version: '1.2.8-SNAPSHOT'
  rtiddsgen group: 'xalan', name: 'xalan', version: '2.7.1'
  rtiddsgen group: 'org.antlr', name: 'antlr', version: '3.5'
  rtiddsgen group: 'org.aspectj', name: 'aspectjrt', version: '1.7.2'
}

// makes output directories for the code generator
task mkdirs << {
  file(GENERATED_JAVA_SOURCES).mkdirs()
  file(GENERATED_CPP_SOURCES).mkdirs()
}

// explodes resources (xml schema, etc) used by rtiddsgen
task rtiddsgenExplodeResources(type: Copy) {
  //  dirMode = 0755
  //  fileMode = 0644
  configurations.rtiddsgen.filter {
    it.toString().endsWith(".zip")}.each {
    from zipTree(it)}
  into new File(project.projectDir, 'build/rtiddsgen').getAbsolutePath()
}

// Runs the RTI DDS Generate code generator for all idl files under src/main/idl
task rtiddsgenJava(dependsOn: [mkdirs, rtiddsgenExplodeResources]) << {
  //println project(':x73-idl').build.source
  //println project(':x73-idl').projectDir
  //  FileCollection idlFiles = project(':x73-idl').build.source
  FileTree idlFiles = project(':data-types:x73-idl').build.source

  //println idlFiles
  String loc = new File(project.projectDir, 'build/rtiddsgen/jcpp').getAbsolutePath()

  if(System.properties['os.name'].toLowerCase().contains("windows")) {
    loc = loc + '.cmd'
  }

  String myMain = 'com.rti.ndds.nddsgen.Main'
  List<String> myArgs = ['-language', 'Java']
  myArgs.addAll(['-ppPath', loc])
  myArgs.addAll(['-d', GENERATED_JAVA_SOURCES])
  myArgs.addAll(['-ppOption', '-I'+project(':data-types:x73-idl').projectDir.getAbsolutePath()+'/src/main/idl'])
  myArgs.add('-replace')
  myArgs.add('-inputIdl')

  for(File f : idlFiles) {
    println 'Generating from ' + f.name
    myArgs.add(f.getAbsolutePath())
    javaexec {
      classpath = configurations.rtiddsgen
      jvmArgs = ['-DNDDS_RESOURCE_DIR=build/rtiddsgen/resource/']
      main = myMain
      args = myArgs
    }
    myArgs.remove(myArgs.size()-1)
  }
}

// Deletes the java code generated by the RTI DDS code generator
task cleanRtiddsgenJava(type: Delete) {
  delete GENERATED_JAVA_SOURCES, GENERATED_CPP_SOURCES
}

// IDL files are the inputs to the code generator
//rtiddsgenJava.inputs.source(fileTree(dir: 'src/main/idl').include('**/*.idl'))
rtiddsgenJava.inputs.source(project(':data-types:x73-idl').build.source)

// java files under generated/src/main/java are the outputs of the code generator
rtiddsgenJava.outputs.files(fileTree(dir: GENERATED_JAVA_SOURCES).include('**/*.java'))

// before compiling java code generation must complete
compileJava.dependsOn 'rtiddsgenJava'

// before cleaning generated sources should be cleaned
clean.dependsOn 'cleanRtiddsgenJava'
